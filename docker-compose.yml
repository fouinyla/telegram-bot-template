version: '3.8'

services:
  bot:
    image: telegram-bot
    container_name: telegram-bot
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "python main.py"
    ports:
      - 80:8000
    volumes:
      - .:/bot
    env_file:
      - .env
    depends_on:
      - mysql
      - redis
    networks:
      - local

  mysql:
    image: mysql:8.0
    container_name: telegram-bot-mysql
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    environment:
      - MYSQL_DATABASE=${RDS_DB_NAME}
      - MYSQL_USER=${RDS_USERNAME}
      - MYSQL_PASSWORD=${RDS_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${ROOT_PASSWORD}
    ports:
      - ${EXTERNAL_PORT}:${RDS_PORT}
    expose:
      - ${RDS_PORT}
    env_file:
      - .env
    networks:
      - local

  redis:
    image: redis:latest
    container_name: telegram-bot-redis
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    expose:
      - ${REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/var/lib/redis
    env_file:
      - .env
    networks:
      - local

  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: telegram-bot-redis-commander
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    ports:
      - ${REDIS_COMMANDER_PORT}:${REDIS_COMMANDER_PORT}
    env_file:
      - .env
    environment:
      - REDIS_HOSTS=${REDIS_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - HTTP_USER=${REDIS_COMMANDER_USER}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
      - PORT=${REDIS_COMMANDER_PORT}
    depends_on:
      - redis
    networks:
      - local

volumes:
  mysql_data:
  mysql_log:
  mysql_conf:
  redis:


networks:
  local:
    driver: bridge
